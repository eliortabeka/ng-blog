rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow get;
      allow create: if isSignedIn() && isNotExist();
      allow update: if request.auth.uid == userId && request.resource.data.role == resource.data.role;
    }

    match /posts/{postId} {
      allow read;
      allow create: if (isSignedIn() && isNotExist() && validPost()) || isAdmin();
      allow update: if (isSignedIn() && (isUpVote(postId) || isDownVote(postId))) || postAuthor() || isEditor();
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // && request.resource.data.rank != null

    match /comments/{postId} {
      allow get;
      allow create: if isSignedIn() && isNotExist();
      allow update: if isSignedIn();
    }

    function isAdmin() {
      return request.auth.token.admin;
    }


    function isEditor() {
      return request.auth.token.editor;
    }

    function postAuthor() {
      return request.auth.uid == request.resource.data.userId &&
        request.resource.data.published == resource.data.published;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isNotExist() {
      return resource == null;
    }

    function isUpVote(postId) {
      return request.writeFields.size() == 1 &&
        'score' in request.writeFields &&
        (postId in (get(/databases/$(database)/documents/users/$(request.auth.uid)).data).voted);
    }

    function isDownVote(postId) {
      return request.writeFields.size() == 1 && 'score' in request.writeFields &&
        !(postId in (get(/databases/$(database)/documents/users/$(request.auth.uid)).data).voted);
    }

    function validPost() {
      return request.resource.data.published == 'false';
    }

  }
}
